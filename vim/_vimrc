"*******************************************************************************
"*******************************************************************************
"**                       |    | --- |\  /| .--. .--.                         **
"**                       |    |  |  | \/ | |__' |                            **
"**                        \  /   |  |    | | \  |                            **
"**                       o \/   --- |    | |  \ `--'                         **
"**                                                                           **
"**                     Macros & Miscellaneous Settings                       **
"*******************************************************************************
"*******************************************************************************

"===============================================================================
" VIM Settings:
"===============================================================================
filetype plugin indent on
syntax on
syntax sync minlines=100
version 4.0                       " Avoid warning for wrong version

let mapleader=","

set encoding=utf-8 fileencoding=utf-8 fileencodings=utf-8
set splitright
set number                        " Line numbers on all files
set shellslash
set clipboard=unnamed
set suffixes+=.clw,.hm            " Put these suffixes at the end of completion code
set wildignore+=*.aps,.*~,*.txe,*.plg,*.opt
set nowrap
set winheight=5                   " minimal window height
set complete=.,w,b,u,U,i,t
set hlsearch                      " Highlight search string
set tabstop=3                     " Set tabstops every 3 characters
set shiftwidth=3                  " Set shift width to 3 characters
set shiftround                    " Rounds > & < to nearest shift width
set autowrite                     " Write file every time ESC is pressed
set tag+=../tags
set notagrelative                 " use exact path specified in tag file (not rel.)
set backspace=2                   " Allow backspacing over everything in insert mode
set textwidth=125                 " Set width of text
set viminfo='20,\"50              " read/write a .viminfo file, don't store more than 50 lines of registers
set visualbell                    " Stop that infernal racket!
set expandtab                     " Expand the tabs to spaces
set ruler                         " Display the column and line numbers
set ignorecase                    " Ignore case when searching
set nosmartcase                   " Override ignorecase if search pattern contains upper case letters
set autoindent                    " Set autoindenting on
set smartindent                   " Do smart autoindenting
set smarttab                      " Tab shiftwidth positions in front of lines
set cmdheight=1                   " Command line height
set comments=fb:*,fb:-,b:\",b:#   " Set comment characteristics for any file
set formatoptions=trq             " Set comment format options for any file
set cpoptions=$BceFs              " Vim/Vi settings
set isfname=@,48-57,/,:,.,-,_,+,,,$,\\,~   " omit quote and add \,~
set grepprg=c:/cygwin64/bin/grep\ -nHRs\ $*\ .\ 2>nul
set listchars=eol:$,tab:→·,trail:▓

"===============================================================================
" PLUGINS, MACROS, LIBRARIES, SYNTAX, etc.
"===============================================================================

packadd! matchit

"-------------------------------------------------------------------------------
" Library: Doskey abbreviations set up as command line abbreviations - use
" doskey.awk to recreate.
"-------------------------------------------------------------------------------
so $BIN\doskey.vim

"-------------------------------------------------------------------------------
" Syntax: MINE
"-------------------------------------------------------------------------------
so $VIM/vimfiles/after/syntax/mysyntax.vim

hi Comment guifg=DarkGreen ctermfg=DarkGreen

augroup vimrc_todo
   au!
   au Syntax * syn match MyTodo contained /\v<(NOTE|TODO|FUTURE|SCOTT|SERWIN|ERWIN|FIXME|mah|MAH)/
         \ containedin=.*Comment.*
augroup END

hi def link MyTodo Todo

"-------------------------------------------------------------------------------
" Plugin: Multiple Cursors (aka Sublime Multi-select)
"-------------------------------------------------------------------------------
nnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>
vnoremap <silent> <M-j> :MultipleCursorsFind <C-R>/<CR>
"let g:multi_cursor_use_default_mapping=0
"let g:multi_cursor_start_key='g<M-n>'
"let g:multi_cursor_start_word_key='<M-n>'
"let g:multi_cursor_next_key='<M-n>'
"let g:multi_cursor_prev_key='<M-p>'
"let g:multi_cursor_skip_key='<M-x>'
"let g:multi_cursor_quit_key='<Esc>'

"--------------------------------------------------------------------------------
" Plugin: vim-airline
"--------------------------------------------------------------------------------
"let g:airline_powerline_fonts=1
let g:airline_symbols_ascii=1
let b:airline_whitespace_checks = [ 'indent', 'trailing', 'mixed-indent-file' ]
let g:airline_skip_empty_sections=1

"--------------------------------------------------------------------------------
" Plugin: Vim Indent Guides
"--------------------------------------------------------------------------------
let g:indent_guides_enable_on_vim_startup=1

"--------------------------------------------------------------------------------
" Plugin: markdown
"--------------------------------------------------------------------------------
"let g:vim_markdown_folding_level=2
"let g:vim_markdown_new_list_item_indent=0
let g:vim_markdown_folding_style_pythonic=1

"--------------------------------------------------------------------------------
" Plugin: syntastic
" Description: Syntax checking plugin. I use it with Javascript linter 'ESLint'
"--------------------------------------------------------------------------------
" Misc settings
au BufEnter */sa/redesign/* call SenseAwareSyntastic()
function SenseAwareSyntastic()
   " Statusline
   set statusline=[%n]\ %t\ %m
   set statusline+=%#warningmsg#
   set statusline+=%{SyntasticStatuslineFlag()}
   set statusline+=%*
   set statusline+=%=%l:%c

   let g:syntastic_always_populate_loc_list = 1
   let g:syntastic_loc_list_height = 5
   let g:syntastic_auto_loc_list = 1
   let g:syntastic_check_on_open = 0
   let g:syntastic_check_on_wq = 1
   let g:syntastic_aggregate_errors = 1

   " Checkers per filetype
   let g:syntastic_javascript_checkers = ['eslint']
   let g:syntastic_sass_checkers = ['sasslint']
   let g:syntastic_scss_checkers = ['sasslint']

   let g:syntastic_mode_map = {
      \ "mode": "active",
      \ "active_filetypes": ["javascript"],
      \ "passive_filetypes": ["sass", "scss"] }

   " Left margin symbols
   let g:syntastic_error_symbol = '×'
   let g:syntastic_warning_symbol = '√'

   " Colors
   hi SyntasticWarning guibg=Magenta guifg=Black ctermbg=Magenta ctermfg=Black
   hi SyntasticError guibg=Red guifg=White ctermbg=Red ctermfg=White
endfun

"-------------------------------------------------------------------------------
" Plugin: pathogen
" Description: Poor man's module loader
"-------------------------------------------------------------------------------
execute pathogen#infect()
execute pathogen#helptags()

let g:vim_json_syntax_conceal=0
let g:mustache_abbreviations=1

"-------------------------------------------------------------------------------
" Plugin: nerdtree and nerdtree plugins
"-------------------------------------------------------------------------------
let NERDTreeIgnore=["apple.*png","favicon*","node_modules","jmvc","static"]
let g:NERDTreeShowGitStatus=0
let g:NERDTreeShowSvnStatus=0 " temporarily turn off 
let g:NERDTreeUpdateOnWrite=0
let g:NERDTreeMinimalUI=1

" open NERDTree when vim starts up with no file
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
au FileType nerdtree hi CursorLine ctermbg=yellow ctermfg=black

" close vim if only window left open is NERDTree
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

map <Leader>nt :NERDTreeToggle<CR>
map <Leader>nf :NERDTreeFind<CR>

"-------------------------------------------------------------------------------
" Plugin: vim-closetag
"-------------------------------------------------------------------------------
let g:closetag_filenames = '*.html,*.mustache'

"-------------------------------------------------------------------------------
" Plugin: vim-javascript
"-------------------------------------------------------------------------------
"nothing

"-------------------------------------------------------------------------------
" Plugin: align
"-------------------------------------------------------------------------------
au BufEnter *.properties,*.json let AlignCtrl=Align#AlignCtrl("l:")

fun! AlignSkipString(lineNum, ndx)
   let synId   = synID(a:lineNum,a:ndx+1,1)
   let synName = synIDattr(synId,"name")
   let ret = (synName == "javaScriptString") ? 1 : 0
   return ret
endfun
au BufEnter *.js let g:AlignSkip=function("AlignSkipString")

" Search for a function of the same name as word under cursor
au BufEnter *.js nmap <F3> :call search(expand("<cword>").':\s*function')<CR>

"-------------------------------------------------------------------------------
" Macro: Procease AutoHotkey and Doskey Macros
"-------------------------------------------------------------------------------
au BufEnter artifacts.txt set formatoptions=croql cindent comments=n:; filetype=txt tabstop=4
au BufEnter doskey.mac setf doskey

"-------------------------------------------------------------------------------
" Description: WSAW (SenseAware) Project-specific settings
"-------------------------------------------------------------------------------
" Handle WSAW Fixture files that are supposed to look like downloaded CSV's by setting the filetype.
au BufEnter file.*.json setlocal filetype=csv

au BufEnter */sa/redesign/* set path+=c:/sa/redesign
au BufEnter *.md set formatoptions-=c

map <Leader>cr :call CodeReviewMenu()<CR>

"-------------------------------------------------------------------------------
" Macro Library: QuickFileList
" Description: Show file list of commonly used files from quick list file
"-------------------------------------------------------------------------------
ru CQuickFileList.src
au BufEnter,BufNewFile * nnoremap [f :sp $BIN/QuickFileList<CR>/USEFUL/+2<CR>
au BufEnter,BufNewFile svn-commit* nnoremap [f :call Artifacts()<CR>

"-------------------------------------------------------------------------------
" Plugin: Ctrl-P
"-------------------------------------------------------------------------------
" List current file list and prompt for jump
noremap [l :CtrlPBuffer<CR>

let g:ctrlp_mruf_relative = 1 " show only MRU files in current working dir
let g:ctrlp_working_path_mode='a'
let g:ctrlp_custom_ignore = {
\ 'dir' : '\v[\/](node_modules|dist|\.(git|svn|tmp|settings|metadata)|packages|web|web-dev|jmvc|static|wsawui/shared|sams/shared)$',
\ 'file': '\v\.(exe|dll|sw[po]|bak|tgz|swp|tmp)'
\}
let g:ctrlp_mruf_exclude = "\v((.*\.(sw[po]|bak|tgz|swp|tmp))|.*\\QuickFileList|ctrlp.txt|production.js)"
let g:ctrlp_cmd="CtrlPMRU"
let g:ctrlp_working_path_mode="a"

"===============================================================================
" AUTO COMMANDS:
"===============================================================================

" JavaScript, etc.
"-------------------------------------------------------------------------------
au BufEnter *.js set formatoptions=croql cindent comments=b://,sr:/*,mnb:*,el:*/ cinoptions=>s,e0,n0,f0,{0,}0,^0,:s,=s,ps,ts,+s,(0,)0,*30
au BufEnter *.mustache,*.css,*.scss set iskeyword+=-

au BufEnter *.mustache call MyMustacheTags()
function! MyMustacheTags()
   syntax match myMustacheConditionals "[#/]\(compare\|boolIf\|showField\|displayErrors\)\>" skipwhite containedin=mustacheSection
   syntax match myMustacheOperators "\"\(lss\|eq\|neq\|gtr\|leq\|geq\|typeof\|in\)\"" skipwhite containedin=mustacheSection
   hi link myMustacheConditionals mustacheConditionals
   hi link myMustacheOperators Operator
endfun

" Highlight DocumentJS tags in multiple different file type comments
au Syntax javascript,css,scss,dosbatch call MyJsDocTags()
function! MyJsDocTags()
   syntax match jsDocTags containedin=.*Comment "@\(add\|alias\|body\|demo\|download\|group\|hide\|iframe\|inherits\|option\|page\|parent\|plugin\|prototype\|release\|return\|signature\|test\|typedef\|baseclass\)\>" skipwhite
   syntax match jsDocTags containedin=.*Comment "@\(abstract\|access\|alias\|arg\|argument\|augments\|author\|borrows\|callback\|class\|classdesc\|const\|constant\|constructor\|constructs\|copyright\|default\|defaultvalue\|deprecated\|desc\|description\|emits\|enum\|event\|example\|exception\|exports\|extends\|external\|file\|fileoverview\|fires\|func\|function\|global\|host\|ignore\|implements\|inheritdoc\|inner\|instance\|interface\|kind\|lends\|license\|link\|linkcode\|linkplain\|listens\|member\|memberof\|method\|mixes\|mixin\|module\|name\|namespace\|override\|overview\|param\|private\|prop\|property\|cfg\|protected\|public\|readonly\|requires\|return\|returns\|see\|since\|static\|summary\|this\|throws\|todo\|tutorial\|tutorial\|type\|typedef\|var\|variation\|version\|virtual\)\>" skipwhite
   hi link jsDocTags Special
endfun

" Batch files
"--------------------------------------------------------------------------------
au BufEnter *.bat set comments=b:REM,b:rem formatoptions=croq
au BufEnter *.bat set keywordprg=help

" Perl files
"-------------------------------------------------------------------------------
au FileType perl set formatoptions=croql comments=b:# cinkeys-=0#

" Vim Source/Macros
"-------------------------------------------------------------------------------
au BufEnter *.src,vim* set comments=b:\" formatoptions=croq

" Flex/ActionScript
"-------------------------------------------------------------------------------
au BufNewFile,BufRead *.mxml setfiletype=mxml
au BufNewFile,BufRead *.as setfiletype=actionscript

"===============================================================================
" FUNCTIONS:
"===============================================================================
"-------------------------------------------------------------------------------
" Function: GrepIt
"-------------------------------------------------------------------------------
fun! GrepIt(Needle, ...)
   " If we are in the NERDTree, don't replace it with Grep results, switch to
   " next window first.
   "
   if bufname("%") == t:NERDTreeBufName
      wincmd l
   endif

   " Default look in js, mustache & json files
   let l:haystack = a:0 > 0 ? a:1 : '*.{js,mustache,hbs,json,mxml,as}'

   " If an include/file pattern is given, then we can't specify an exclude, else default exclude.
   let l:exclude = a:0 > 0 ? '' : ' --exclude={*.swp,production.js,style.css,styleguide.css,\.*}'

   execute "silent! grep " . a:Needle . l:exclude . " --exclude-dir={dist,lib,.svn,qaTest,node_modules,tmp,vendor,bin,bin-debug,.settings,build,libs*,.metadata,mock,generation,deploy,test,jmvc,static,web,wsawui/shared,sams/shared} --include=" . l:haystack
   copen
endfun
command! -nargs=+ Grep call GrepIt(<f-args>)
nnoremap gr :let @/=expand("<cword>")<CR>:Grep <cword><CR>
nnoremap Gr :let @/=expand("<cword>")<CR>:Grep \b<cword>\b<CR>

"-------------------------------------------------------------------------------
" Function: GraspIt
" Description: Called by the command line function 'Grasp'
" Example:
"
"  Search for the keyword 'initTimer'. This will return a list of finds and put
"  them in the Quickfix list window (same as Grep). This will search our defined
"  set of searchable directories recursively (see the GraspIt default
"  'l:haystack' value below).
"
"    Grasp #initTimer
"
"  This will search the current file '%' for the keyword 'initTimer' AND replace
"  all finds with 'initTimerLogout' inline.
"
"    Grasp #initTimer -R initTimerLogout -i %
"
"-------------------------------------------------------------------------------
"fun! GraspIt(Needle, ...)
"   if bufname("%") == t:NERDTreeBufName
"      wincmd l
"   endif
"
"   " Default recursive but skip those listed
"   let l:haystack = (a:0 > 0) ? join(a:000, " ") : '--recursive --exclude "dist/*,lib/*,scripts/*"'
"
"   let l:needle = fnameescape(a:Needle)
"
"   setlocal grepprg=grasp
"   execute "silent! grep --filename --no-color --no-bold " . l:needle . " " . l:haystack
"   set grepprg<
"
"   " If the inline flag is not supplied, then automatically open the Quickfix window
"   if match(l:haystack, "-i ") == -1
"      copen
"   endif
"endfun
"command! -nargs=+ Grasp call GraspIt(<f-args>)

"-------------------------------------------------------------------------------
" Function: CodeReview
" Description: Assumes that there's a list on the clipboard to parse!! Run
" getCommits.cmd to obtain and then copy from the outputted JSON.
"-------------------------------------------------------------------------------
fun! CodeReview(...)
   " If we are in the NERDTree, don't replace it with Grep results, switch to
   " next window first.
   if exists(t:NERDTreeBufName) && bufname("%") == t:NERDTreeBufName
      wincmd l
   endif

   try
      if a:0 == 0
         let l:commits = substitute(strtrans(@*),'\^@\s*','','g')
         silent execute "let l:commitList = " . l:commits
      else
         let l:commitList = a:1
      endif

      if len(l:commitList) > 0
         if has_key(l:commitList[0], "filename")
            call setqflist(l:commitList)
            call setqflist([], 'a', {'title': 'Code Review'})
            copen
            cc 1
         endif
      endif
   catch
      echo "Clipboard contents are not in list format!"
   endtry
endfun

"-------------------------------------------------------------------------------
" Function: CodeReviewMenu
" Description: Present 'menu' of possible artifacts to load for code reviews.
" Requires function CodeReview.
"-------------------------------------------------------------------------------
function! CodeReviewMenu(...)
   let l:file = "/temp/commits.json"

   if a:0 > 0
      let l:file = a:1
   endif

   " This assumes that the commits file json is on a single line!! Because we
   " output the commits in JSON format, there should be an ARRAY of artifact
   " objects (containing an array of individual commits) that VIM will interpret
   " as a "List" because they are surrounded by square brackets.
   execute "let l:artifactList = " . readfile(l:file)[0]

   let l:choices = []

   let l:ndx = 1
   for artf in artifactList
      let l:storyNum = l:ndx . artf.story

      call add(l:choices, l:storyNum)
      let l:ndx = l:ndx + 1
   endfor

   let l:choiceString = join(l:choices, "\n")
   let l:chosen = confirm("Choose the Story to review:", l:choiceString)

   if l:chosen > 0
      " Look to see if we have previously used EditQF to modify the code review quickfix and saved to /temp/<story#>. If so
      " load up QF with that file instead.
      let l:pth = "/temp/" . l:artifactList[l:chosen-1].story

      if (filereadable(l:pth))
         execute "QFLoad! " . l:pth
         copen
         cc 1
      else
         silent call CodeReview(l:artifactList[l:chosen-1].paths)
      endif
   endif
endf

"-------------------------------------------------------------------------------
" Function: Artifacts
" Description: Present the user with a list of possible artifacts to commit with
" for SVN. This is a Teamforge requirement.
"
" artifacts.txt is in format:
"
" Make sure to put the dash!!---------V
"
"     #.<TAB>[artfNNNNNNN]<TAB>Story# - StoryDescription
"-------------------------------------------------------------------------------
function! Artifacts()
   let artfs = readfile("c:/bin/artifacts.txt", "", 10)
   let artf = inputlist(artfs)
   if artf > 0
      " Split out the values for the line chosen into an array
      let vals = split(artfs[artf], '\t')
      let story = split(vals[2], " - ")

      " Split out and include the story/backlog # in the commit comment
      let storyNum = len(story) > 1 ? " (" . story[0] . ")" : ""
      let str = vals[1] . " Scott" . storyNum . ": "

      " Append (prepend) the commit string to the svn commit file
      let rc = append(0, str)

      " Move to the top of the file and put in Append mode
      normal gg
      normal A
   endif
endf

"-------------------------------------------------------------------------------
" Function: Shell
" Description: Run a command have have the output directed to a scratch buffer
"-------------------------------------------------------------------------------
command! -complete=shellcmd -nargs=+ Shell call s:RunShellCommand(<q-args>)
function! s:RunShellCommand(cmdline)
  echo a:cmdline
  let expanded_cmdline = a:cmdline
  for part in split(a:cmdline, ' ')
     if part[0] =~ '\v[%#<]'
        let expanded_part = fnameescape(expand(part))
        let expanded_cmdline = substitute(expanded_cmdline, part, expanded_part, '')
     endif
  endfor
  botright new
  " turns the buffer into a "scratch" buffer
  setlocal buftype=nofile bufhidden=wipe nobuflisted noswapfile nowrap
  call setline(1, 'You entered:    ' . a:cmdline)
  call setline(2, 'Expanded Form:  ' .expanded_cmdline)
  call setline(3,substitute(getline(2),'.','=','g'))
  execute '$read !'. expanded_cmdline
  setlocal nomodifiable
endf

"-------------------------------------------------------------------------------
" Function: SvnIt
" Description: Run the svn command with Shell function
"-------------------------------------------------------------------------------
function! s:SvnIt(cmd, ...)
   call s:RunShellCommand('svn '.a:cmd.' '.join(a:000))

   if a:cmd == "log"
      setlocal filetype=svnlog
      norm gg
   endif
endf

command! -complete=file -nargs=* Svn call s:SvnIt(<f-args>)
command! -complete=file -nargs=* Git call s:RunShellCommand('git '.<q-args>)

map <Leader>sc :!svn commit %<CR>
map <Leader>sd :!start svn diff %<CR>
map <Leader>sD :!start svn diff -rPREV:COMMITTED %<CR>
map <Leader>sl :Svn log %<CR>
command! Sup :!svn update<CR>

"-------------------------------------------------------------------------------
" Function: Incr
" Description: Increment the selected range ?
"-------------------------------------------------------------------------------
function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endf
vnoremap <C-a> :call Incr()<CR>

"-------------------------------------------------------------------------------
" Description: Miscellaneous
"-------------------------------------------------------------------------------
au BufWinEnter *.htm*,*.js[(on)]* silent loadview

" Popup menu styling
highlight Pmenu ctermbg=Gray guibg=Gray
highlight PmenuSel guibg=DarkBlue ctermbg=DarkBlue guifg=Yellow ctermfg=Yellow

" Miscellaneous typo fixes
cab wq1 wq!
cab q1 q!
cmap e1 e!
iab toLowercase toLowerCase
iab toUppercase toUpperCase

" ??
vnoremap p "_d:norm ""p<CR>
vnoremap P "_d:norm ""P<CR>

" Show syntax of item under cursor
noremap <F4> :echo synIDattr(synID(line("."), col("."), 1), "name")<CR>
" Toggle highlight searches
noremap <F5> :call ToggleOption('hlsearch')<CR>
" Next file
noremap <F7> :bNext<CR>     " Previous buffer
" Previous file
noremap <F8> :bnext<CR>     " Next buffer

" Shorthand for starting the substitute command on the whole file or in visual select mode
nnoremap S yiw:%s/\<<C-R>"\>/
vnoremap S :s/

" Replace the currently selected visual area with whatever you just yanked.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Inserts blank line below/above current line and stays in on current line and in command mode.
nmap oo o<ESC>k
nmap OO O<ESC>j

inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <C-Space>

"--------------------------------------------------------------------------------
" Deprecated
"--------------------------------------------------------------------------------

" Format document using tlib:Format
"noremap ,f :call Format()<CR>

" Immediately exit the current buffer without saving it.
"nnoremap [q :bd!<CR>

"-------------------------------------------------------------------------------
" Scroll top and bottom windows simultaneously
"-------------------------------------------------------------------------------
"nnoremap ?? <C-E><C-W><C-W><C-E><C-W><C-W>  " Ctrl-Down
"nnoremap ?? <C-Y><C-W><C-W><C-Y><C-W><C-W>  " Ctrl-Up

